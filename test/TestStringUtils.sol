// solium-disable security/no-low-level-calls
pragma solidity ^0.5.10;

import "../contracts/utils/StringUtils.sol";
import "truffle/Assert.sol";


contract TestStringUtils {
    using StringUtils for uint256;
    using StringUtils for string;

    function testToBytes32Dirty() external {
        string memory text = "n*3]N";
        assembly {
            mstore(text, 1)
        }

        Assert.equal(text.toBytes32(), 0x6e00000000000000000000000000000000000000000000000000000000000000, "");
    }

    function externalTestFailBytes32TooLong() external {
        string memory text = "`~:WfD&f<}>xZ}8dj2x_W[|fJCS83`XSa";
        text.toBytes32();
    }

    function testFailBytes32TooLong() external {
        (bool success, ) = address(this).call(abi.encodeWithSelector(
                this.externalTestFailBytes32TooLong.selector
            )
        );

        Assert.isFalse(success, "toBytes32 long string should fail");
    }

    function testConcat() external {
        assertEqual(string("").concat("abc"), "abc");
        assertEqual(string("abc").concat(""), "abc");
        assertEqual(
            string("`~:WfD&f<}>xZ}8dj2x_W[|fJCS83`XSa").concat("[Apx-Ayfk|4[vm:/yWlPA<Iy\\D|1?Br"),
            "`~:WfD&f<}>xZ}8dj2x_W[|fJCS83`XSa[Apx-Ayfk|4[vm:/yWlPA<Iy\\D|1?Br"
        );
    }

    function testToBytes32() external {
        string memory text = "";
        bytes32 encoded = text.toBytes32();
        string memory decoded = StringUtils.fromBytes32(encoded);
        Assert.equal(encoded, 0x0000000000000000000000000000000000000000000000000000000000000000, "");
        assertEqual(text, decoded);

        text = "n";
        encoded = text.toBytes32();
        decoded = StringUtils.fromBytes32(encoded);
        Assert.equal(encoded, 0x6e00000000000000000000000000000000000000000000000000000000000000, "");
        assertEqual(text, decoded);

        text = "4W";
        encoded = text.toBytes32();
        decoded = StringUtils.fromBytes32(encoded);
        Assert.equal(encoded, 0x3457000000000000000000000000000000000000000000000000000000000000, "");
        assertEqual(text, decoded);

        text = ";cp";
        encoded = text.toBytes32();
        decoded = StringUtils.fromBytes32(encoded);
        Assert.equal(encoded, 0x3b63700000000000000000000000000000000000000000000000000000000000, "");
        assertEqual(text, decoded);

        text = "*3]N";
        encoded = text.toBytes32();
        decoded = StringUtils.fromBytes32(encoded);
        Assert.equal(encoded, 0x2a335d4e00000000000000000000000000000000000000000000000000000000, "");
        assertEqual(text, decoded);

        text = "{~2Cj";
        encoded = text.toBytes32();
        decoded = StringUtils.fromBytes32(encoded);
        Assert.equal(encoded, 0x7b7e32436a000000000000000000000000000000000000000000000000000000, "");
        assertEqual(text, decoded);

        text = "^3LU~D";
        encoded = text.toBytes32();
        decoded = StringUtils.fromBytes32(encoded);
        Assert.equal(encoded, 0x5e334c557e440000000000000000000000000000000000000000000000000000, "");
        assertEqual(text, decoded);

        text = "sr5WX3f";
        encoded = text.toBytes32();
        decoded = StringUtils.fromBytes32(encoded);
        Assert.equal(encoded, 0x7372355758336600000000000000000000000000000000000000000000000000, "");
        assertEqual(text, decoded);

        text = "Y3\\h*zC-";
        encoded = text.toBytes32();
        decoded = StringUtils.fromBytes32(encoded);
        Assert.equal(encoded, 0x59335c682a7a432d000000000000000000000000000000000000000000000000, "");
        assertEqual(text, decoded);

        text = "p_CQB0e&q";
        encoded = text.toBytes32();
        decoded = StringUtils.fromBytes32(encoded);
        Assert.equal(encoded, 0x705f435142306526710000000000000000000000000000000000000000000000, "");
        assertEqual(text, decoded);

        text = "Tqj(}U^'Si";
        encoded = text.toBytes32();
        decoded = StringUtils.fromBytes32(encoded);
        Assert.equal(encoded, 0x54716a287d555e27536900000000000000000000000000000000000000000000, "");
        assertEqual(text, decoded);

        text = "bp~Rp@C|W0r";
        encoded = text.toBytes32();
        decoded = StringUtils.fromBytes32(encoded);
        Assert.equal(encoded, 0x62707e527040437c573072000000000000000000000000000000000000000000, "");
        assertEqual(text, decoded);

        text = "|o$Hk|SCbAgY";
        encoded = text.toBytes32();
        decoded = StringUtils.fromBytes32(encoded);
        Assert.equal(encoded, 0x7c6f24486b7c5343624167590000000000000000000000000000000000000000, "");
        assertEqual(text, decoded);

        text = "_,Fy5'69skv;.";
        encoded = text.toBytes32();
        decoded = StringUtils.fromBytes32(encoded);
        Assert.equal(encoded, 0x5f2c467935273639736b763b2e00000000000000000000000000000000000000, "");
        assertEqual(text, decoded);

        text = "v{%aR)Gmh2-\\et";
        encoded = text.toBytes32();
        decoded = StringUtils.fromBytes32(encoded);
        Assert.equal(encoded, 0x767b25615229476d68322d5c6574000000000000000000000000000000000000, "");
        assertEqual(text, decoded);

        text = "'kvQ_&)(_T%3Y<i";
        encoded = text.toBytes32();
        decoded = StringUtils.fromBytes32(encoded);
        Assert.equal(encoded, 0x276b76515f2629285f542533593c690000000000000000000000000000000000, "");
        assertEqual(text, decoded);

        text = "qtlu34*|`XJ}c=S>";
        encoded = text.toBytes32();
        decoded = StringUtils.fromBytes32(encoded);
        Assert.equal(encoded, 0x71746c7533342a7c60584a7d633d533e00000000000000000000000000000000, "");
        assertEqual(text, decoded);

        text = "dexwIlaX-+f!R2'2d";
        encoded = text.toBytes32();
        decoded = StringUtils.fromBytes32(encoded);
        Assert.equal(encoded, 0x64657877496c61582d2b66215232273264000000000000000000000000000000, "");
        assertEqual(text, decoded);

        text = "5F,gw#ZKg$Z5hZXdoq";
        encoded = text.toBytes32();
        decoded = StringUtils.fromBytes32(encoded);
        Assert.equal(encoded, 0x35462c6777235a4b67245a35685a58646f710000000000000000000000000000, "");
        assertEqual(text, decoded);

        text = "_AT7%+GEf_*%1*^~G&,";
        encoded = text.toBytes32();
        decoded = StringUtils.fromBytes32(encoded);
        Assert.equal(encoded, 0x5f415437252b4745665f2a25312a5e7e47262c00000000000000000000000000, "");
        assertEqual(text, decoded);

        text = "=wX#,g53%4WCF2?%cr?1";
        encoded = text.toBytes32();
        decoded = StringUtils.fromBytes32(encoded);
        Assert.equal(encoded, 0x3d7758232c6735332534574346323f2563723f31000000000000000000000000, "");
        assertEqual(text, decoded);

        text = "/0Ry2~E~$d&Rn?[d^,b$W";
        encoded = text.toBytes32();
        decoded = StringUtils.fromBytes32(encoded);
        Assert.equal(encoded, 0x2f305279327e457e246426526e3f5b645e2c6224570000000000000000000000, "");
        assertEqual(text, decoded);

        text = ":BI$cI|gL_^l\\m+2'o\\nY`";
        encoded = text.toBytes32();
        decoded = StringUtils.fromBytes32(encoded);
        Assert.equal(encoded, 0x3a42492463497c674c5f5e6c5c6d2b32276f5c6e596000000000000000000000, "");
        assertEqual(text, decoded);

        text = "D*2j#%D?C[^\\V(w][FfK@4>";
        encoded = text.toBytes32();
        decoded = StringUtils.fromBytes32(encoded);
        Assert.equal(encoded, 0x442a326a2325443f435b5e5c5628775d5b46664b40343e000000000000000000, "");
        assertEqual(text, decoded);

        text = "2|Ebx`<IstG!%eQ{1;M)ko\\+";
        encoded = text.toBytes32();
        decoded = StringUtils.fromBytes32(encoded);
        Assert.equal(encoded, 0x327c456278603c49737447212565517b313b4d296b6f5c2b0000000000000000, "");
        assertEqual(text, decoded);

        text = "/&[.r>^<1rqHq(![&m#|?m8)>";
        encoded = text.toBytes32();
        decoded = StringUtils.fromBytes32(encoded);
        Assert.equal(encoded, 0x2f265b2e723e5e3c317271487128215b266d237c3f6d38293e00000000000000, "");
        assertEqual(text, decoded);

        text = ":!GSriG,},&6T]!g~9&!lRbX3J";
        encoded = text.toBytes32();
        decoded = StringUtils.fromBytes32(encoded);
        Assert.equal(encoded, 0x3a2147537269472c7d2c2636545d21677e3926216c526258334a000000000000, "");
        assertEqual(text, decoded);

        text = "jy\\u'z`EyATaXGiO%pg+`q.+S|~";
        encoded = text.toBytes32();
        decoded = StringUtils.fromBytes32(encoded);
        Assert.equal(encoded, 0x6a795c75277a6045794154615847694f2570672b60712e2b537c7e0000000000, "");
        assertEqual(text, decoded);

        text = "Y@z,I46pR@>9j<8p:vzlTDw3xKs-";
        encoded = text.toBytes32();
        decoded = StringUtils.fromBytes32(encoded);
        Assert.equal(encoded, 0x59407a2c4934367052403e396a3c38703a767a6c54447733784b732d00000000, "");
        assertEqual(text, decoded);

        text = "1tlrPNWDEM2V(#{Hw=v]>quvQC47k";
        encoded = text.toBytes32();
        decoded = StringUtils.fromBytes32(encoded);
        Assert.equal(encoded, 0x31746c72504e5744454d325628237b48773d765d3e717576514334376b000000, "");
        assertEqual(text, decoded);

        text = "nD2t*~t!lE\\\\r?b6'EgBcsk#ADNHf[";
        encoded = text.toBytes32();
        decoded = StringUtils.fromBytes32(encoded);
        Assert.equal(encoded, 0x6e4432742a7e74216c455c5c723f62362745674263736b2341444e48665b0000, "");
        assertEqual(text, decoded);

        text = "[Apx-Ayfk|4[vm:/yWlPA<Iy\\D|1?Br";
        encoded = text.toBytes32();
        decoded = StringUtils.fromBytes32(encoded);
        Assert.equal(encoded, 0x5b4170782d4179666b7c345b766d3a2f79576c50413c49795c447c313f427200, "");
        assertEqual(text, decoded);

        text = "`~:WfD&f<}>xZ}8dj2x_W[|fJCS83`XS";
        encoded = text.toBytes32();
        decoded = StringUtils.fromBytes32(encoded);
        Assert.equal(encoded, 0x607e3a57664426663c7d3e785a7d38646a32785f575b7c664a43533833605853, "");
        assertEqual(text, decoded);
    }

    function testToUintToString() external {
        testToString(
            0,
            "0"
        );

        testToString(
            1,
            "1"
        );

        testToString(
            4,
            "4"
        );

        testToString(
            10,
            "10"
        );

        testToString(
            25,
            "25"
        );

        testToString(
            100,
            "100"
        );

        testToString(
            657,
            "657"
        );

        testToString(
            1000,
            "1000"
        );

        testToString(
            2917,
            "2917"
        );

        testToString(
            10000,
            "10000"
        );

        testToString(
            21521,
            "21521"
        );

        testToString(
            100000,
            "100000"
        );

        testToString(
            763163,
            "763163"
        );

        testToString(
            1000000,
            "1000000"
        );

        testToString(
            10072713,
            "10072713"
        );

        testToString(
            10000000,
            "10000000"
        );

        testToString(
            59547165,
            "59547165"
        );

        testToString(
            100000000,
            "100000000"
        );

        testToString(
            1029363225,
            "1029363225"
        );

        testToString(
            1000000000,
            "1000000000"
        );

        testToString(
            4576324416,
            "4576324416"
        );

        testToString(
            10000000000,
            "10000000000"
        );

        testToString(
            57561713349,
            "57561713349"
        );

        testToString(
            100000000000,
            "100000000000"
        );

        testToString(
            573112295092,
            "573112295092"
        );

        testToString(
            1000000000000,
            "1000000000000"
        );

        testToString(
            7672636414016,
            "7672636414016"
        );

        testToString(
            10000000000000,
            "10000000000000"
        );

        testToString(
            11389573938475,
            "11389573938475"
        );

        testToString(
            100000000000000,
            "100000000000000"
        );

        testToString(
            723093705251462,
            "723093705251462"
        );

        testToString(
            1000000000000000,
            "1000000000000000"
        );

        testToString(
            3141110073386370,
            "3141110073386370"
        );

        testToString(
            10000000000000000,
            "10000000000000000"
        );

        testToString(
            40841490353530386,
            "40841490353530386"
        );

        testToString(
            100000000000000000,
            "100000000000000000"
        );

        testToString(
            1096948316063490080,
            "1096948316063490080"
        );

        testToString(
            1000000000000000000,
            "1000000000000000000"
        );

        testToString(
            1744954759145427819,
            "1744954759145427819"
        );

        testToString(
            10000000000000000000,
            "10000000000000000000"
        );

        testToString(
            83097354047748552417,
            "83097354047748552417"
        );

        testToString(
            100000000000000000000,
            "100000000000000000000"
        );

        testToString(
            1093627146385352689477,
            "1093627146385352689477"
        );

        testToString(
            1000000000000000000000,
            "1000000000000000000000"
        );

        testToString(
            6717413441252902904955,
            "6717413441252902904955"
        );

        testToString(
            10000000000000000000000,
            "10000000000000000000000"
        );

        testToString(
            29743136625036477014062,
            "29743136625036477014062"
        );

        testToString(
            100000000000000000000000,
            "100000000000000000000000"
        );

        testToString(
            378572648172102961693909,
            "378572648172102961693909"
        );

        testToString(
            1000000000000000000000000,
            "1000000000000000000000000"
        );

        testToString(
            7840448147504684790309777,
            "7840448147504684790309777"
        );

        testToString(
            10000000000000000000000000,
            "10000000000000000000000000"
        );

        testToString(
            64009500960502453506373066,
            "64009500960502453506373066"
        );

        testToString(
            100000000000000000000000000,
            "100000000000000000000000000"
        );

        testToString(
            270191053421695472564200811,
            "270191053421695472564200811"
        );

        testToString(
            1000000000000000000000000000,
            "1000000000000000000000000000"
        );

        testToString(
            4134475282346674637195209167,
            "4134475282346674637195209167"
        );

        testToString(
            10000000000000000000000000000,
            "10000000000000000000000000000"
        );

        testToString(
            99567500043090983778142435752,
            "99567500043090983778142435752"
        );

        testToString(
            100000000000000000000000000000,
            "100000000000000000000000000000"
        );

        testToString(
            337952464188190558622480367106,
            "337952464188190558622480367106"
        );

        testToString(
            1000000000000000000000000000000,
            "1000000000000000000000000000000"
        );

        testToString(
            8869730973956871311269110747568,
            "8869730973956871311269110747568"
        );

        testToString(
            10000000000000000000000000000000,
            "10000000000000000000000000000000"
        );

        testToString(
            31185414982017677211827435478084,
            "31185414982017677211827435478084"
        );

        testToString(
            100000000000000000000000000000000,
            "100000000000000000000000000000000"
        );

        testToString(
            142383914519616454571624617346664,
            "142383914519616454571624617346664"
        );

        testToString(
            1000000000000000000000000000000000,
            "1000000000000000000000000000000000"
        );

        testToString(
            10880157440380722503771797714896073,
            "10880157440380722503771797714896073"
        );

        testToString(
            10000000000000000000000000000000000,
            "10000000000000000000000000000000000"
        );

        testToString(
            105146174069703810719540488518683664,
            "105146174069703810719540488518683664"
        );

        testToString(
            100000000000000000000000000000000000,
            "100000000000000000000000000000000000"
        );

        testToString(
            652046694704273829352835537600433701,
            "652046694704273829352835537600433701"
        );

        testToString(
            1000000000000000000000000000000000000,
            "1000000000000000000000000000000000000"
        );

        testToString(
            9403725847191753001536029778622597519,
            "9403725847191753001536029778622597519"
        );

        testToString(
            10000000000000000000000000000000000000,
            "10000000000000000000000000000000000000"
        );

        testToString(
            74917844388363506246297243864076924333,
            "74917844388363506246297243864076924333"
        );

        testToString(
            100000000000000000000000000000000000000,
            "100000000000000000000000000000000000000"
        );

        testToString(
            277489203894293926532740460950474395448,
            "277489203894293926532740460950474395448"
        );

        testToString(
            1000000000000000000000000000000000000000,
            "1000000000000000000000000000000000000000"
        );

        testToString(
            5936889976125556455847686967196806250139,
            "5936889976125556455847686967196806250139"
        );

        testToString(
            10000000000000000000000000000000000000000,
            "10000000000000000000000000000000000000000"
        );

        testToString(
            41378523814590980756136895082195005307397,
            "41378523814590980756136895082195005307397"
        );

        testToString(
            100000000000000000000000000000000000000000,
            "100000000000000000000000000000000000000000"
        );

        testToString(
            273478044971431905420857780174152182427818,
            "273478044971431905420857780174152182427818"
        );

        testToString(
            1000000000000000000000000000000000000000000,
            "1000000000000000000000000000000000000000000"
        );

        testToString(
            5713086619073366518170391959470320462442242,
            "5713086619073366518170391959470320462442242"
        );

        testToString(
            10000000000000000000000000000000000000000000,
            "10000000000000000000000000000000000000000000"
        );

        testToString(
            106773503989666090043105859700044343264508056,
            "106773503989666090043105859700044343264508056"
        );

        testToString(
            100000000000000000000000000000000000000000000,
            "100000000000000000000000000000000000000000000"
        );

        testToString(
            1010364955110168334556244396007718718547616682,
            "1010364955110168334556244396007718718547616682"
        );

        testToString(
            1000000000000000000000000000000000000000000000,
            "1000000000000000000000000000000000000000000000"
        );

        testToString(
            4886092418641296365529121426052610195276488506,
            "4886092418641296365529121426052610195276488506"
        );

        testToString(
            10000000000000000000000000000000000000000000000,
            "10000000000000000000000000000000000000000000000"
        );

        testToString(
            92465507649355862880628299893734405365804632890,
            "92465507649355862880628299893734405365804632890"
        );

        testToString(
            100000000000000000000000000000000000000000000000,
            "100000000000000000000000000000000000000000000000"
        );

        testToString(
            828882727069077955547158375375547028555992222593,
            "828882727069077955547158375375547028555992222593"
        );

        testToString(
            1000000000000000000000000000000000000000000000000,
            "1000000000000000000000000000000000000000000000000"
        );

        testToString(
            6689933651251432406953806950329884306341131095302,
            "6689933651251432406953806950329884306341131095302"
        );

        testToString(
            10000000000000000000000000000000000000000000000000,
            "10000000000000000000000000000000000000000000000000"
        );

        testToString(
            75108288171795927191372189990421101680610134793899,
            "75108288171795927191372189990421101680610134793899"
        );

        testToString(
            100000000000000000000000000000000000000000000000000,
            "100000000000000000000000000000000000000000000000000"
        );

        testToString(
            534560638041607383360358470621568674769190515503904,
            "534560638041607383360358470621568674769190515503904"
        );

        testToString(
            1000000000000000000000000000000000000000000000000000,
            "1000000000000000000000000000000000000000000000000000"
        );

        testToString(
            4660844612951687944276685278504412810475520236927000,
            "4660844612951687944276685278504412810475520236927000"
        );

        testToString(
            10000000000000000000000000000000000000000000000000000,
            "10000000000000000000000000000000000000000000000000000"
        );

        testToString(
            97378195278481345384404855539470517974469693438126361,
            "97378195278481345384404855539470517974469693438126361"
        );

        testToString(
            100000000000000000000000000000000000000000000000000000,
            "100000000000000000000000000000000000000000000000000000"
        );

        testToString(
            203632222802623757083258134646614116011275879635800981,
            "203632222802623757083258134646614116011275879635800981"
        );

        testToString(
            1000000000000000000000000000000000000000000000000000000,
            "1000000000000000000000000000000000000000000000000000000"
        );

        testToString(
            4042421420720608261325856488888932094073226384652857042,
            "4042421420720608261325856488888932094073226384652857042"
        );

        testToString(
            10000000000000000000000000000000000000000000000000000000,
            "10000000000000000000000000000000000000000000000000000000"
        );

        testToString(
            84983103917153836192802756236978561346715282452068664560,
            "84983103917153836192802756236978561346715282452068664560"
        );

        testToString(
            100000000000000000000000000000000000000000000000000000000,
            "100000000000000000000000000000000000000000000000000000000"
        );

        testToString(
            926983463932674763211913675915888081003938036028247092062,
            "926983463932674763211913675915888081003938036028247092062"
        );

        testToString(
            1000000000000000000000000000000000000000000000000000000000,
            "1000000000000000000000000000000000000000000000000000000000"
        );

        testToString(
            7544612242536302626654164085525426643553162877464323777767,
            "7544612242536302626654164085525426643553162877464323777767"
        );

        testToString(
            10000000000000000000000000000000000000000000000000000000000,
            "10000000000000000000000000000000000000000000000000000000000"
        );

        testToString(
            39125531200089574993852911531170157386023263645502947302249,
            "39125531200089574993852911531170157386023263645502947302249"
        );

        testToString(
            100000000000000000000000000000000000000000000000000000000000,
            "100000000000000000000000000000000000000000000000000000000000"
        );

        testToString(
            765322215443370331899455940165846009821324794285271884124220,
            "765322215443370331899455940165846009821324794285271884124220"
        );

        testToString(
            1000000000000000000000000000000000000000000000000000000000000,
            "1000000000000000000000000000000000000000000000000000000000000"
        );

        testToString(
            4774636864740417633636988245551637148380086142147011512826761,
            "4774636864740417633636988245551637148380086142147011512826761"
        );

        testToString(
            10000000000000000000000000000000000000000000000000000000000000,
            "10000000000000000000000000000000000000000000000000000000000000"
        );

        testToString(
            53543604766781320209578784442221853345758836413892374791979857,
            "53543604766781320209578784442221853345758836413892374791979857"
        );

        testToString(
            100000000000000000000000000000000000000000000000000000000000000,
            "100000000000000000000000000000000000000000000000000000000000000"
        );

        testToString(
            319048491712750104772049984450815899475318199090367328724160370,
            "319048491712750104772049984450815899475318199090367328724160370"
        );

        testToString(
            1000000000000000000000000000000000000000000000000000000000000000,
            "1000000000000000000000000000000000000000000000000000000000000000"
        );

        testToString(
            8012198017028844908331432128732683293095132656888645458978911563,
            "8012198017028844908331432128732683293095132656888645458978911563"
        );

        testToString(
            10000000000000000000000000000000000000000000000000000000000000000,
            "10000000000000000000000000000000000000000000000000000000000000000"
        );

        testToString(
            49205793401674265095836320851190715518579533022887227731035643330,
            "49205793401674265095836320851190715518579533022887227731035643330"
        );

        testToString(
            100000000000000000000000000000000000000000000000000000000000000000,
            "100000000000000000000000000000000000000000000000000000000000000000"
        );

        testToString(
            287975443765693858946434706520019458506441458099446404789068236760,
            "287975443765693858946434706520019458506441458099446404789068236760"
        );

        testToString(
            1000000000000000000000000000000000000000000000000000000000000000000,
            "1000000000000000000000000000000000000000000000000000000000000000000"
        );

        testToString(
            1591520252648690966239205965635890728979980813805275050342205983985,
            "1591520252648690966239205965635890728979980813805275050342205983985"
        );

        testToString(
            10000000000000000000000000000000000000000000000000000000000000000000,
            "10000000000000000000000000000000000000000000000000000000000000000000"
        );

        testToString(
            19538122019339387387697258585453795964328810883384017404610446361410,
            "19538122019339387387697258585453795964328810883384017404610446361410"
        );

        testToString(
            100000000000000000000000000000000000000000000000000000000000000000000,
            "100000000000000000000000000000000000000000000000000000000000000000000"
        );

        testToString(
            404726401490604527354721368379527696597600712358144300388394255863488,
            "404726401490604527354721368379527696597600712358144300388394255863488"
        );

        testToString(
            1000000000000000000000000000000000000000000000000000000000000000000000,
            "1000000000000000000000000000000000000000000000000000000000000000000000"
        );

        testToString(
            8121707752793144311570004273966677442810741591311359097849180128693416,
            "8121707752793144311570004273966677442810741591311359097849180128693416"
        );

        testToString(
            10000000000000000000000000000000000000000000000000000000000000000000000,
            "10000000000000000000000000000000000000000000000000000000000000000000000"
        );

        testToString(
            71142213890818353980226350967587199389626907602180140000013615047920804,
            "71142213890818353980226350967587199389626907602180140000013615047920804"
        );

        testToString(
            100000000000000000000000000000000000000000000000000000000000000000000000,
            "100000000000000000000000000000000000000000000000000000000000000000000000"
        );

        testToString(
            433394871712223767615194298931457468216469863538442909640499212031308553,
            "433394871712223767615194298931457468216469863538442909640499212031308553"
        );

        testToString(
            1000000000000000000000000000000000000000000000000000000000000000000000000,
            "1000000000000000000000000000000000000000000000000000000000000000000000000"
        );

        testToString(
            3115015231387635912094432532705602699116431317642802969920468240067265989,
            "3115015231387635912094432532705602699116431317642802969920468240067265989"
        );

        testToString(
            10000000000000000000000000000000000000000000000000000000000000000000000000,
            "10000000000000000000000000000000000000000000000000000000000000000000000000"
        );

        testToString(
            73018158340757554392668339968062662423614197652827181738633497564125847927,
            "73018158340757554392668339968062662423614197652827181738633497564125847927"
        );

        testToString(
            100000000000000000000000000000000000000000000000000000000000000000000000000,
            "100000000000000000000000000000000000000000000000000000000000000000000000000"
        );

        testToString(
            1080479780413593802537894079904284792221101638279049692031464162343340932001,
            "1080479780413593802537894079904284792221101638279049692031464162343340932001"
        );

        testToString(
            1000000000000000000000000000000000000000000000000000000000000000000000000000,
            "1000000000000000000000000000000000000000000000000000000000000000000000000000"
        );

        testToString(
            9066835700562897942152861231910849422372564708081900333433689227963388344587,
            "9066835700562897942152861231910849422372564708081900333433689227963388344587"
        );

        testToString(
            10000000000000000000000000000000000000000000000000000000000000000000000000000,
            "10000000000000000000000000000000000000000000000000000000000000000000000000000"
        );

        testToString(
            56321608173934820981698717854463608653444156146305255912662989988350118793738,
            "56321608173934820981698717854463608653444156146305255912662989988350118793738"
        );

        testToString(
            100000000000000000000000000000000000000000000000000000000000000000000000000000,
            "100000000000000000000000000000000000000000000000000000000000000000000000000000"
        );

        testToString(
            115792089237316195423570985008687907823269984665640564039457584007913129639935,
            "115792089237316195423570985008687907823269984665640564039457584007913129639935"
        );
    }

    function testToString(uint256 _a, string memory _b) private {
        assertEqual(_a.toString(), _b);
    }

    function assertEqual(string memory _a, string memory _b) private {
        Assert.equal(keccak256(abi.encodePacked(_a)), keccak256(abi.encodePacked(_b)), "strings should be equal");
    }
}
